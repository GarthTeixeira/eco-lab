
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example;

import java_cup.runtime.*;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TiposDeToken.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\005\000\002\003" +
    "\007\000\002\004\004\000\002\004\005\000\002\005\004" +
    "\000\002\006\003\000\002\006\005\000\002\007\003\000" +
    "\002\007\003\000\002\010\004\000\002\010\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\005\000\002\013\007\000\002\013\011\000" +
    "\002\014\003\000\002\015\005\000\002\016\004\000\002" +
    "\017\011\000\002\020\007\000\002\021\006\000\002\022" +
    "\006\000\002\023\003\000\002\023\003\000\002\024\003" +
    "\000\002\024\005\000\002\024\011\000\002\025\003\000" +
    "\002\025\005\000\002\026\003\000\002\026\005\000\002" +
    "\027\003\000\002\027\004\000\002\027\004\000\002\030" +
    "\003\000\002\030\003\000\002\030\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\004\005\001\002\000\004\002\161\001" +
    "\002\000\004\005\006\001\002\000\004\006\010\001\002" +
    "\000\004\002\000\001\002\000\006\011\015\012\013\001" +
    "\002\000\004\030\160\001\002\000\004\005\154\001\002" +
    "\000\004\005\ufff8\001\002\000\010\007\017\011\015\012" +
    "\013\001\002\000\004\005\ufff9\001\002\000\004\030\153" +
    "\001\002\000\020\005\036\013\020\016\030\017\033\020" +
    "\034\022\024\023\027\001\002\000\014\005\051\024\063" +
    "\041\050\053\046\056\041\001\002\000\004\030\ufff4\001" +
    "\002\000\004\030\uffef\001\002\000\004\030\143\001\002" +
    "\000\004\024\140\001\002\000\004\030\ufff5\001\002\000" +
    "\004\030\ufff2\001\002\000\004\024\133\001\002\000\020" +
    "\005\036\013\020\016\030\017\033\020\034\022\024\023" +
    "\027\001\002\000\004\030\ufff0\001\002\000\004\030\ufff3" +
    "\001\002\000\014\005\051\024\063\041\050\053\046\056" +
    "\041\001\002\000\004\005\036\001\002\000\022\005\036" +
    "\010\112\013\020\016\030\017\033\020\034\022\024\023" +
    "\027\001\002\000\004\027\040\001\002\000\004\030\ufff1" +
    "\001\002\000\014\005\051\024\044\041\050\053\046\056" +
    "\041\001\002\000\050\014\uffd7\016\uffd7\021\uffd7\025\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\001\002\000\050\014\uffdd\016\uffdd\021" +
    "\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\001\002\000\014\021\uffee" +
    "\030\uffee\040\074\041\075\042\072\001\002\000\014\005" +
    "\051\024\063\041\050\053\046\056\041\001\002\000\050" +
    "\014\uffdf\016\uffdf\021\uffdf\025\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\060\044\056\045\057\046\054\001" +
    "\002\000\010\005\051\024\044\056\041\001\002\000\050" +
    "\014\uffdb\016\uffdb\021\uffdb\025\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001" +
    "\002\000\010\005\051\024\044\056\041\001\002\000\050" +
    "\014\uffd8\016\uffd8\021\uffd8\025\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\001" +
    "\002\000\050\014\uffd9\016\uffd9\021\uffd9\025\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\001\002\000\050\014\uffda\016\uffda\021\uffda\025" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\001\002\000\014\005\uffc9\024\uffc9" +
    "\041\uffc9\053\uffc9\056\uffc9\001\002\000\014\005\051\024" +
    "\044\041\050\053\046\056\041\001\002\000\014\005\uffcb" +
    "\024\uffcb\041\uffcb\053\uffcb\056\uffcb\001\002\000\014\005" +
    "\uffca\024\uffca\041\uffca\053\uffca\056\uffca\001\002\000\014" +
    "\005\uffcc\024\uffcc\041\uffcc\053\uffcc\056\uffcc\001\002\000" +
    "\050\014\uffdc\016\uffdc\021\uffdc\025\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\001\002\000\034\014\uffe2\016\uffe2\025\uffe2\030\uffe2\032" +
    "\101\033\106\034\102\035\107\036\103\037\105\040\074" +
    "\041\075\042\072\001\002\000\014\005\051\024\063\041" +
    "\050\053\046\056\041\001\002\000\004\025\065\001\002" +
    "\000\050\014\uffd6\016\uffd6\021\uffd6\025\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\001\002\000\004\025\067\001\002\000\046\014\uffd6" +
    "\016\uffd6\025\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\055\070\001\002\000\014\005" +
    "\051\024\044\041\050\053\046\056\041\001\002\000\012" +
    "\031\076\040\074\041\075\042\072\001\002\000\014\005" +
    "\uffcd\024\uffcd\041\uffcd\053\uffcd\056\uffcd\001\002\000\014" +
    "\005\051\024\044\041\050\053\046\056\041\001\002\000" +
    "\014\005\uffcf\024\uffcf\041\uffcf\053\uffcf\056\uffcf\001\002" +
    "\000\014\005\uffce\024\uffce\041\uffce\053\uffce\056\uffce\001" +
    "\002\000\014\005\051\024\044\041\050\053\046\056\041" +
    "\001\002\000\020\014\uffe0\016\uffe0\025\uffe0\030\uffe0\040" +
    "\074\041\075\042\072\001\002\000\050\014\uffde\016\uffde" +
    "\021\uffde\025\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\060\044\056\045\057\046\054\001\002\000\014\005" +
    "\uffd5\024\uffd5\041\uffd5\053\uffd5\056\uffd5\001\002\000\014" +
    "\005\uffd3\024\uffd3\041\uffd3\053\uffd3\056\uffd3\001\002\000" +
    "\014\005\uffd1\024\uffd1\041\uffd1\053\uffd1\056\uffd1\001\002" +
    "\000\014\005\051\024\044\041\050\053\046\056\041\001" +
    "\002\000\014\005\uffd0\024\uffd0\041\uffd0\053\uffd0\056\uffd0" +
    "\001\002\000\014\005\uffd4\024\uffd4\041\uffd4\053\uffd4\056" +
    "\uffd4\001\002\000\014\005\uffd2\024\uffd2\041\uffd2\053\uffd2" +
    "\056\uffd2\001\002\000\020\014\uffe1\016\uffe1\025\uffe1\030" +
    "\uffe1\040\074\041\075\042\072\001\002\000\004\030\113" +
    "\001\002\000\004\002\uffff\001\002\000\024\005\ufff6\010" +
    "\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6" +
    "\023\ufff6\001\002\000\004\021\115\001\002\000\014\005" +
    "\051\024\063\041\050\053\046\056\041\001\002\000\004" +
    "\016\120\001\002\000\010\014\uffeb\016\uffeb\030\uffeb\001" +
    "\002\000\020\005\036\013\020\016\030\017\033\020\034" +
    "\022\024\023\027\001\002\000\022\005\036\010\122\013" +
    "\020\016\030\017\033\020\034\022\024\023\027\001\002" +
    "\000\004\030\uffe8\001\002\000\004\016\124\001\002\000" +
    "\020\005\036\013\020\016\030\017\033\020\034\022\024" +
    "\023\027\001\002\000\022\005\036\010\126\013\020\016" +
    "\030\017\033\020\034\022\024\023\027\001\002\000\004" +
    "\030\uffe7\001\002\000\020\005\036\013\020\016\030\017" +
    "\131\020\034\022\024\023\027\001\002\000\004\030\uffea" +
    "\001\002\000\014\005\051\024\063\041\050\053\046\056" +
    "\041\001\002\000\006\016\124\030\uffe9\001\002\000\016" +
    "\005\051\024\063\026\134\041\050\053\046\056\041\001" +
    "\002\000\004\025\uffe3\001\002\000\004\025\uffe4\001\002" +
    "\000\004\025\137\001\002\000\004\030\uffe5\001\002\000" +
    "\004\005\141\001\002\000\004\025\142\001\002\000\004" +
    "\030\uffe6\001\002\000\024\005\ufff7\010\ufff7\013\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\001\002" +
    "\000\004\014\145\001\002\000\020\005\036\013\020\016" +
    "\030\017\033\020\034\022\024\023\027\001\002\000\024" +
    "\005\036\010\147\013\020\015\150\016\030\017\033\020" +
    "\034\022\024\023\027\001\002\000\004\030\uffed\001\002" +
    "\000\020\005\036\013\020\016\030\017\033\020\034\022" +
    "\024\023\027\001\002\000\022\005\036\010\152\013\020" +
    "\016\030\017\033\020\034\022\024\023\027\001\002\000" +
    "\004\030\uffec\001\002\000\010\007\ufffd\011\ufffd\012\ufffd" +
    "\001\002\000\006\030\ufffb\054\156\001\002\000\004\030" +
    "\ufffc\001\002\000\004\005\154\001\002\000\004\030\ufffa" +
    "\001\002\000\010\007\ufffe\011\ufffe\012\ufffe\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\006\001\001\000\002\001\001" +
    "\000\010\004\013\005\010\007\011\001\001\000\002\001" +
    "\001\000\004\006\154\001\001\000\002\001\001\000\006" +
    "\005\015\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\034\011\022\012\024\013\020\015\025" +
    "\017\036\020\031\021\030\022\021\001\001\000\016\014" +
    "\143\024\116\025\061\026\044\027\041\030\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\010\126\011\022\012\024\013\020\015" +
    "\025\017\036\020\031\021\030\022\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\122\024\116\025" +
    "\061\026\044\027\041\030\046\001\001\000\004\012\113" +
    "\001\001\000\022\011\110\012\024\013\020\015\025\017" +
    "\036\020\031\021\030\022\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\042\026\044\027\041\030" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\072\001\001\000\014\024\063\025\061\026\044\027" +
    "\041\030\046\001\001\000\004\033\054\001\001\000\004" +
    "\030\052\001\001\000\002\001\001\000\004\030\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\060\030\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\103\032\072\001\001\000\014\024" +
    "\065\025\061\026\044\027\041\030\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\070\026\044\027\041\030\046\001\001" +
    "\000\004\032\072\001\001\000\002\001\001\000\010\026" +
    "\077\027\041\030\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\076\026\044\027\041\030\046\001" +
    "\001\000\004\032\072\001\001\000\004\033\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\107\026\044\027\041\030\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\115\024\116\025" +
    "\061\026\044\027\041\030\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\120\011\022\012\024\013" +
    "\020\015\025\017\036\020\031\021\030\022\021\001\001" +
    "\000\022\011\110\012\024\013\020\015\025\017\036\020" +
    "\031\021\030\022\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\010\124\011\022\012\024\013\020\015" +
    "\025\017\036\020\031\021\030\022\021\001\001\000\022" +
    "\011\110\012\024\013\020\015\025\017\036\020\031\021" +
    "\030\022\021\001\001\000\002\001\001\000\024\011\110" +
    "\012\024\013\020\015\025\016\127\017\036\020\031\021" +
    "\030\022\021\001\001\000\002\001\001\000\016\014\131" +
    "\024\116\025\061\026\044\027\041\030\046\001\001\000" +
    "\002\001\001\000\016\023\135\024\134\025\061\026\044" +
    "\027\041\030\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\145\011\022\012\024\013\020" +
    "\015\025\017\036\020\031\021\030\022\021\001\001\000" +
    "\022\011\110\012\024\013\020\015\025\017\036\020\031" +
    "\021\030\022\021\001\001\000\002\001\001\000\024\010" +
    "\150\011\022\012\024\013\020\015\025\017\036\020\031" +
    "\021\030\022\021\001\001\000\022\011\110\012\024\013" +
    "\020\015\025\017\036\020\031\021\030\022\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private HashMap<String,Integer> symT = new HashMap<String,Integer>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PALAVRA_RESERVADA_PROGRAM IDENTIFICADOR body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= PALAVRA_RESERVADA_DECLARE decl_list PALAVRA_RESERVADA_BEGIN stmt_list PALAVRA_RESERVADA_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= decl SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::= decl_list decl SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= type ident_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ident_list ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ident_list ::= IDENTIFICADOR COMMA ident_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= PALAVRA_RESERVADA_INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= PALAVRA_RESERVADA_DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_list ::= stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_list ::= stmt_list stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= assign_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= do_while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= read_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= write_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assign_stmt ::= IDENTIFICADOR OPERADOR_ASSIGN simple_expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int smpl_exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smpl_exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object smpl_ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (smpl_ex instanceof String)
                        System.out.println("Erro: Strign nao pode ser atribuida a variavel");
                    else
                        symT.put(id.toString(), (Integer)smpl_ex);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if_stmt ::= PALAVRA_RESERVADA_IF condition PALAVRA_RESERVADA_THEN stmt_list PALAVRA_RESERVADA_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stmt ::= PALAVRA_RESERVADA_IF condition PALAVRA_RESERVADA_THEN stmt_list PALAVRA_RESERVADA_ELSE stmt_list PALAVRA_RESERVADA_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condition ::= expression 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if ( exp instanceof Boolean) RESULT = exp;
                                else System.out.println("Erro: Expressao nao booleana");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // do_while_stmt ::= PALAVRA_RESERVADA_DO stmt_list stmt_suffix 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_while_stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt_suffix ::= PALAVRA_RESERVADA_WHILE condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_suffix",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // for_stmt ::= PALAVRA_RESERVADA_FOR assign_stmt PALAVRA_RESERVADA_TO condition PALAVRA_RESERVADA_DO stmt_list PALAVRA_RESERVADA_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // while_stmt ::= PALAVRA_RESERVADA_WHILE condition PALAVRA_RESERVADA_DO stmt_list PALAVRA_RESERVADA_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // read_stmt ::= PALAVRA_RESERVADA_READ LEFT_PARENTHESIS IDENTIFICADOR RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_stmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // write_stmt ::= PALAVRA_RESERVADA_WRITE LEFT_PARENTHESIS writable RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println(w);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // writable ::= expression 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ex;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // writable ::= LITERAL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ((String) l).toString().replaceAll("\"","");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= simple_expr 
            {
              Object RESULT =null;
		int smpl_exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smpl_exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object smpl_ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = smpl_ex;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= simple_expr relop simple_expr 
            {
              Object RESULT =null;
		int smpl_ex_aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int smpl_ex_aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object smpl_ex_a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int relopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smpl_ex_bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smpl_ex_bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object smpl_ex_b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (relop.equals("="))
                        RESULT = new Boolean(((Integer)smpl_ex_a).intValue() == ((Integer)smpl_ex_b).intValue());
                    else if (relop.equals(">"))
                        RESULT = new Boolean(((Integer)smpl_ex_a).intValue() > ((Integer)smpl_ex_b).intValue());
                    else if (relop.equals(">="))
                        RESULT = new Boolean(((Integer)smpl_ex_a).intValue() >= ((Integer)smpl_ex_b).intValue());
                    else if (relop.equals("<"))
                        RESULT = new Boolean(((Integer)smpl_ex_a).intValue() < ((Integer)smpl_ex_b).intValue());
                    else if (relop.equals("<="))
                        RESULT = new Boolean(((Integer)smpl_ex_a).intValue() <= ((Integer)smpl_ex_b).intValue());
                    else if (relop.equals("<>"))
                        RESULT = new Boolean(((Integer)smpl_ex_a).intValue() != ((Integer)smpl_ex_b).intValue());
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS INTERROGATION simple_expr COLON simple_expr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int smpl_ax_aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int smpl_ax_aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object smpl_ax_a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int smpl_ax_bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smpl_ax_bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object smpl_ax_b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = ((Boolean)exp).booleanValue() ? smpl_ax_a : smpl_ax_b;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_expr ::= term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_expr ::= simple_expr addop term 
            {
              Object RESULT =null;
		int smpl_exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int smpl_exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object smpl_ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object addop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if (addop.equals("+"))
                        RESULT = ((Integer)smpl_ex).intValue() + ((Integer)t).intValue();
                    else if (addop.equals("-"))
                        RESULT = ((Integer)smpl_ex).intValue() - ((Integer)t).intValue();
                    else if (addop.equals("or"))
                        RESULT = ((Boolean)smpl_ex).booleanValue() || ((Boolean)t).booleanValue();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // term ::= factor_a 
            {
              Object RESULT =null;
		int f_aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f_aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f_a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f_a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // term ::= term mulop factor_a 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mulop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f_aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f_aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f_a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if (mulop.equals("*")){
                    RESULT = ((Integer)t).intValue() * ((Integer)f_a).intValue();
                }else if (mulop.equals("/")){
                    if (((Integer)f_a).intValue() == 0) System.out.println("Erro: Divisao por zero");
                    RESULT = ((Integer)t).intValue() / ((Integer)f_a).intValue();
                }else if (mulop.equals("%")){
                    RESULT = ((Integer)t).intValue() % ((Integer)f_a).intValue();
                }else if (mulop.equals("and"))
                    RESULT = ((Boolean)t).booleanValue() && ((Boolean)f_a).booleanValue();
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor_a ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_a",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor_a ::= PALAVRA_RESERVADA_NOT factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (f instanceof Boolean)
                RESULT = !((Boolean)f).booleanValue();
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_a",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor_a ::= OPERADOR_MINUS factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if ( f instanceof Integer)
                RESULT = -((Integer)f).intValue();
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_a",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if (symT.containsKey(id.toString()))
                    RESULT = symT.get(id.toString());
                else
                    System.out.println("Erro: Variavel nao declarada");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= CONSTANT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= OPERADOR_EQUAL 
            {
              Object RESULT =null;
		int op_equalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_equalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_equal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_equal;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= OPERADOR_GREAT 
            {
              Object RESULT =null;
		int op_greaterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_greaterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_greater = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_greater;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relop ::= OPERADOR_GREATEQUAL 
            {
              Object RESULT =null;
		int op_greater_equalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_greater_equalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_greater_equal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_greater_equal;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relop ::= OPERADOR_LESS 
            {
              Object RESULT =null;
		int op_lessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_lessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_less = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_less;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relop ::= OPERADOR_LESSEQUAL 
            {
              Object RESULT =null;
		int op_less_equalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_less_equalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_less_equal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_less_equal;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relop ::= OPERADOR_DIFFERENT 
            {
              Object RESULT =null;
		int op_not_equalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_not_equalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_not_equal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_not_equal;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // addop ::= OPERADOR_ADD 
            {
              Object RESULT =null;
		int op_addleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_addright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_add = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_add;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // addop ::= OPERADOR_MINUS 
            {
              Object RESULT =null;
		int op_minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_minus;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // addop ::= PALAVRA_RESERVADA_OR 
            {
              Object RESULT =null;
		int op_orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_or;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mulop ::= OPERADOR_MULT 
            {
              Object RESULT =null;
		int op_multleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_multright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_mult = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_mult;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mulop ::= OPERADOR_PART 
            {
              Object RESULT =null;
		int op_divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_div = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_div;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mulop ::= PALAVRA_RESERVADA_MOD 
            {
              Object RESULT =null;
		int op_modleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_modright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_mod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_mod;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mulop ::= PALAVRA_RESERVADA_AND 
            {
              Object RESULT =null;
		int op_andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op_and = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op_and;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // shiftop ::= OPERADOR_LEFT_SHIFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // shiftop ::= OPERADOR_RIGHT_SHIFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // shiftop ::= OPERADOR_UNSIGNED_RIGHT_SHIFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // shiftop ::= OPERADOR_UNSIGNED_LEFT_SHIFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
